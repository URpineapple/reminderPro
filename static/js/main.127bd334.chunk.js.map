{"version":3,"sources":["images/time.png","actions/index.js","constants.js","components/ReminderList.jsx","components/App.jsx","reducers/index.js","index.js"],"names":["module","exports","updateReminder","id","text","action","type","console","log","ReminderList","props","addZero","num","state","days","hours","minutes","seconds","value","reminder","edit","setInterval","getTimeUntil","dueDate","a","moment","this","format","deadline","currentDate","Date","time","parse","Math","floor","setState","key","className","autoFocus","onFocus","event","target","backup","onChange","onBlur","onKeyUp","onClick","formatTime","deleteReminder","Component","App","currTime","add","document","querySelector","String","checkEmpty","addReminder","textInput","errorText","getElementById","style","display","border","alt","src","rows","placeholder","reminders","map","index","window","confirm","clearReminders","connect","random","removeById","filter","read_cookie","bake_cookie","store","createStore","reducer","ReactDOM","render"],"mappings":"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","file":"static/js/main.127bd334.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/time.753b7f10.png\";","import { ADD_REMINDER, DELETE_REMINDER, CLEAR_REMINDERS, UPDATE_REMINDER } from '../constants'\r\n\r\nexport const addReminder = (text, dueDate) => {\r\n    const action = {\r\n        type: ADD_REMINDER,\r\n        text,\r\n        dueDate\r\n    }\r\n    console.log('action in addReminder', action);\r\n    return action\r\n}\r\n\r\nexport const deleteReminder = (id) => {\r\n    const action ={\r\n        type: DELETE_REMINDER,\r\n        id\r\n    }\r\n    console.log('delete in actions', action)\r\n    return action\r\n}\r\n\r\nexport const clearReminders = () => {\r\n    return{\r\n        type: CLEAR_REMINDERS\r\n    }\r\n}\r\n\r\nexport const updateReminder = (id, text) => {\r\n    const action = {\r\n        type: UPDATE_REMINDER,\r\n        id,\r\n        text\r\n    }\r\n    console.log('action in updateReminder', action);\r\n    return action\r\n}","export const ADD_REMINDER = 'ADD_REMINDER'\r\nexport const DELETE_REMINDER = 'DELETE_REMINDER'\r\nexport const CLEAR_REMINDERS = 'CLEAR_REMINDERS'\r\nexport const UPDATE_REMINDER = 'UPDATE_REMINDER'","import React, { Component } from 'react'\r\nimport moment from 'moment'\r\n\r\nexport default class ReminderList extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            days: 0,\r\n            hours: 0,\r\n            minutes: 0,\r\n            seconds: 0,\r\n            value: props.reminder.text,\r\n            id: props.reminder.id,\r\n            edit: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        setInterval(() => this.getTimeUntil(this.props.reminder.dueDate), 1000)\r\n        let a = moment(this.props.reminder.dueDate).format('MM-DD-YYYY')\r\n        console.log(a)\r\n    }\r\n\r\n    getTimeUntil(deadline) {\r\n        let currentDate = new Date()\r\n        const time = Date.parse(deadline) - Date.parse(currentDate)\r\n        const seconds = Math.floor((time / 1000) % 60)\r\n        const minutes = Math.floor((time / 1000 / 60) % 60)\r\n        const hours = Math.floor((time / (1000 * 60 * 60)) % 24)\r\n        const days = Math.floor((time / (1000 * 60 * 60 * 24)))\r\n\r\n        this.setState({ days, hours, minutes, seconds })\r\n    }\r\n\r\n    addZero = num => {\r\n        return num < 0 ? num : num < 10 ? '0' + num : num\r\n    }\r\n\r\n    formatTime(deadline) {\r\n        return moment(deadline).format('LLL')\r\n    }\r\n\r\n    edit() {\r\n        this.setState({ edit: this.state.edit !== false })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <li key={this.state.id} className=\"list-group-item shadow-sm reminder-list\">\r\n                <div className=\"list-item\">\r\n                    {\r\n                        this.state.edit === true\r\n                        && <div className=\"list-item-content\">\r\n                            <textarea\r\n                                value={this.state.value}\r\n                                className=\"list-item-content-edit\"\r\n                                autoFocus\r\n                                onFocus={event => {\r\n                                    event.target.value = this.state.value\r\n                                    this.setState({ backup: this.state.value })\r\n                                }}\r\n                                onChange={event => {\r\n                                    this.setState({ value: event.target.value })\r\n                                }}\r\n                                onBlur={() => {\r\n                                    this.setState({ edit: false })\r\n                                    this.props.updateReminder(this.state.id, this.state.value)\r\n                                }}\r\n                                onKeyUp={event => {\r\n                                    if (event.key === 'Escape') {\r\n                                        this.setState({ edit: false, value: this.state.backup })\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        || <div className=\"list-item-content\" onClick={() => {\r\n                            this.setState({ edit: this.state.edit !== true })\r\n                        }}>\r\n                            <p>{this.state.value}</p>\r\n                        </div>\r\n                    }\r\n                    <div className=\"list-item-deadline\"><span id=\"deadline-text\">DUE: </span>{this.formatTime(this.props.reminder.dueDate)}</div>\r\n                    <div className=\"list-item-countdown\">\r\n                        <span id=\"list-item-day\">{this.addZero(this.state.days)}:</span>\r\n                        <span id=\"list-item-hour\">{this.addZero(this.state.hours)}:</span>\r\n                        <span id=\"list-item-min\">{this.addZero(this.state.minutes)}:</span>\r\n                        <span id=\"list-item-sec\">{this.addZero(this.state.seconds)}</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"list-item delete-button\"\r\n                    onClick={() => this.props.deleteReminder(this.state.id)}>\r\n                    <i className=\"fa fa-times-circle hvr-grow\"></i>\r\n                </div>\r\n            </li>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { addReminder, deleteReminder, clearReminders, updateReminder } from '../actions'\r\nimport '../index.css'\r\nimport moment from 'moment'\r\nimport ReminderList from './ReminderList'\r\nimport time from '../images/time.png'\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            text: '',\r\n            dueDate: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let currTime = moment().add(1, 'd').format('YYYY-MM-DDTHH:mm');\r\n        document.querySelector(\".date-input\").value = String(currTime)\r\n        this.setState({\r\n            text: this.state.text,\r\n            dueDate: String(currTime)\r\n        })\r\n    }\r\n\r\n    addReminder() {\r\n        if (this.checkEmpty())\r\n            this.props.addReminder(this.state.text, this.state.dueDate)\r\n        this.setState({\r\n            text: '',\r\n            dueDate: this.state.dueDate\r\n        })\r\n        document.querySelector(\".text-input\").value = \"\"\r\n\r\n    }\r\n\r\n    deleteReminder(id) {\r\n        this.props.deleteReminder(id)\r\n    }\r\n\r\n    updateReminder(id, text) {\r\n        updateReminder(id, text)\r\n    }\r\n\r\n    checkEmpty() {\r\n        const textInput = document.querySelector(\".text-input\");\r\n        const errorText = document.getElementById(\"error-text\");\r\n        if (textInput.value == \"\") {\r\n            errorText.style.display = \"block\";\r\n            textInput.style.border = \"solid 2px red\";\r\n            return false\r\n        } else {\r\n            errorText.style.display = \"none\";\r\n            textInput.style.border = \"\";\r\n            return true\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div id=\"title1\" className=\"shadow-sm\">\r\n                    Reminder Pro <img id=\"time-logo\" alt=\"time-logo\" src={time} />\r\n                </div>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"input-wrapper col-md-5\">\r\n                            <div className=\"reminder-form\">\r\n                                <div className=\"inline-block\">\r\n                                    <textarea rows=\"3\" className=\"form-control text-input\" placeholder=\"write something here...\"\r\n                                        onChange={event => this.setState({ text: event.target.value })} ></textarea>\r\n                                    <div id=\"error-text\">*This field cannnot be empty</div>\r\n                                </div>\r\n                                <div className=\"inline-block\">\r\n                                    <input className=\"form-control date-input\" type=\"datetime-local\" onChange={event => this.setState({ dueDate: event.target.value })} />\r\n                                    <button type=\"submit\" className=\"btn btn-success\" onClick={() => this.addReminder()}>Add Reminder</button>\r\n                                </div>\r\n                                {!this.props.reminders[0] &&\r\n                                    <div className=\"inline-block tip-text1\">\r\n                                        Tips: Let's create your first reminder by using the button above.\r\n                                </div>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        {this.props.reminders[0] \r\n                        ? <div className=\"output-wrapper col-md-7\">\r\n                                <div>\r\n                                    <div className=\"row reminder-wrapper\">\r\n                                        <ul className=\"list-group\">\r\n                                            {\r\n                                                this.props.reminders.map((reminder, index) => {\r\n                                                    return (\r\n                                                        <ReminderList key={index} reminder={reminder} deleteReminder={this.props.deleteReminder} updateReminder={this.props.updateReminder} />\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </ul>\r\n                                    </div>\r\n                                    <div className=\"row delete-wrapper\">\r\n                                        <button type=\"button\" className=\"btn btn-danger\" onClick={() => { if (window.confirm('Are you sure you wish to delete all items?')) this.props.clearReminders() }}>Clear All</button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            : <div className=\"col-md-7 tip-text2\">\r\n                                <em>*Your reminders will appear here</em>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        reminders: state\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { addReminder, deleteReminder, clearReminders, updateReminder })(App);\r\n","import { ADD_REMINDER, DELETE_REMINDER, CLEAR_REMINDERS, UPDATE_REMINDER } from '../constants';\r\nimport { read_cookie, bake_cookie } from 'sfcookies';\r\nimport { clearReminders } from '../actions';\r\n\r\nconst reminder = (action) => {\r\n    let { text, dueDate } = action;\r\n    return {\r\n        id: Math.random(),\r\n        text,\r\n        dueDate\r\n    }\r\n}\r\n\r\nconst removeById = (state = [], id) => {\r\n    const reminders = state.filter(reminder => reminder.id !== id)\r\n    console.log('new reduced reminders', reminders)\r\n    return reminders\r\n}\r\n\r\nconst updateById = (state = [], action) => {\r\n    let { text, id } = action;\r\n    console.log('actionid', action.id)\r\n    console.log('state', state)\r\n\r\n    const reminder = state.map(e => {\r\n        if (e.id == id) {\r\n            return {\r\n                ...e,\r\n                text: text\r\n            }\r\n        }\r\n        return e\r\n    })\r\n\r\n    return [...state, reminder]\r\n}\r\n\r\nconst reminders = (state = [], action) => {\r\n    let reminders = null;\r\n    state = read_cookie('reminders')\r\n    switch (action.type) {\r\n        case ADD_REMINDER:\r\n            reminders = [...state, reminder(action)]\r\n            bake_cookie('reminders', reminders)\r\n            return reminders\r\n        case DELETE_REMINDER:\r\n            reminders = removeById(state, action.id)\r\n            bake_cookie('reminders', reminders)\r\n            return reminders\r\n        case CLEAR_REMINDERS:\r\n            reminders = []\r\n            bake_cookie('reminders', reminders)\r\n            return reminders\r\n        case UPDATE_REMINDER:\r\n            reminders = state.map(reminder => {\r\n                if (reminder.id == action.id) {\r\n                    return {\r\n                        ...reminder,\r\n                        text: action.text\r\n                    }\r\n                }\r\n                return reminder\r\n            })\r\n            bake_cookie('reminders', reminders)\r\n            return reminders\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nexport default reminders;","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './components/App'\r\nimport { Provider } from 'react-redux'\r\nimport { createStore } from 'redux'\r\nimport reducer from './reducers'\r\n\r\nconst store = createStore(reducer);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}><App /></Provider>, document.getElementById('root')\r\n)"],"sourceRoot":""}