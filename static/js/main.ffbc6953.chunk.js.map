{"version":3,"sources":["images/time.png","components/ReminderList.jsx","components/App.jsx","actions/index.js","constants.js","reducers/index.js","index.js"],"names":["module","exports","ReminderList","props","addZero","num","state","days","hours","minutes","seconds","setInterval","getTimeUntil","reminder","dueDate","a","moment","this","format","console","log","deadline","currentDate","Date","time","parse","Math","floor","setState","key","id","className","text","formatTime","onClick","deleteReminder","Component","App","currTime","add","document","querySelector","value","String","checkEmpty","addReminder","textInput","errorText","getElementById","style","display","border","alt","src","rows","placeholder","onChange","event","target","type","reminders","map","index","window","confirm","clearReminders","connect","action","random","removeById","filter","read_cookie","bake_cookie","store","createStore","reducer","ReactDOM","render"],"mappings":"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","file":"static/js/main.ffbc6953.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/time.753b7f10.png\";","import React, { Component } from 'react'\r\nimport moment from 'moment'\r\n\r\nexport default class ReminderList extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            days: 0,\r\n            hours: 0,\r\n            minutes: 0,\r\n            seconds: 0\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        setInterval(() => this.getTimeUntil(this.props.reminder.dueDate), 1000)\r\n        let a = moment(this.props.reminder.dueDate).format('MM-DD-YYYY')\r\n        console.log(a)\r\n    }\r\n\r\n    getTimeUntil(deadline) {\r\n        let currentDate = new Date()\r\n        const time = Date.parse(deadline) - Date.parse(currentDate)\r\n\r\n        const seconds = Math.floor((time / 1000) % 60)\r\n        const minutes = Math.floor((time / 1000 / 60) % 60)\r\n        const hours = Math.floor((time / (1000 * 60 * 60)) % 24)\r\n        const days = Math.floor((time / (1000 * 60 * 60 * 24)))\r\n\r\n        this.setState({ days, hours, minutes, seconds })\r\n    }\r\n\r\n    addZero = num => {\r\n        return num < 0 ? num : num < 10 ? '0' + num : num\r\n    }\r\n\r\n    formatTime(deadline) {\r\n        return moment(deadline).format('LLL')\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <li key={this.props.reminder.id} className=\"list-group-item shadow-sm reminder-list\">\r\n                <div className=\"list-item\">\r\n                    <div className=\"list-item-content\"><p>{this.props.reminder.text}</p></div>\r\n                    <div className=\"list-item-deadline\"><span id=\"deadline-text\">DUE: </span>{this.formatTime(this.props.reminder.dueDate)}</div>\r\n                    <div className=\"list-item-countdown\">\r\n                        <span id=\"list-item-day\">{this.addZero(this.state.days)}:</span>\r\n                        <span id=\"list-item-hour\">{this.addZero(this.state.hours)}:</span>\r\n                        <span id=\"list-item-min\">{this.addZero(this.state.minutes)}:</span>\r\n                        <span id=\"list-item-sec\">{this.addZero(this.state.seconds)}</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"list-item delete-button\"\r\n                    onClick={() => this.props.deleteReminder(this.props.reminder.id)}>\r\n                        <i className=\"fa fa-times-circle hvr-grow\"></i>\r\n                </div>\r\n            </li>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { addReminder, deleteReminder, clearReminders } from '../actions'\r\nimport '../index.css'\r\nimport moment from 'moment'\r\nimport ReminderList from './ReminderList'\r\nimport time from '../images/time.png'\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            text: '',\r\n            dueDate: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let currTime = moment().add(1, 'd').format('YYYY-MM-DDTHH:mm');\r\n        document.querySelector(\".date-input\").value = String(currTime)\r\n        this.setState({\r\n            text: this.state.text,\r\n            dueDate: String(currTime)\r\n        })\r\n    }\r\n\r\n    addReminder() {\r\n        if (this.checkEmpty())\r\n            this.props.addReminder(this.state.text, this.state.dueDate)\r\n        this.setState({\r\n            text: '',\r\n            dueDate: this.state.dueDate\r\n        })\r\n        document.querySelector(\".text-input\").value = \"\"\r\n\r\n    }\r\n\r\n    deleteReminder(id) {\r\n        this.props.deleteReminder(id)\r\n    }\r\n\r\n    checkEmpty() {\r\n        const textInput = document.querySelector(\".text-input\");\r\n        const errorText = document.getElementById(\"error-text\");\r\n        if (textInput.value == \"\") {\r\n            errorText.style.display = \"block\";\r\n            textInput.style.border = \"solid 2px red\";\r\n            return false\r\n        } else {\r\n            errorText.style.display = \"none\";\r\n            textInput.style.border = \"\";\r\n            return true\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div id=\"title1\" className=\"shadow-sm\">\r\n                    Reminder Pro <img id=\"time-logo\" alt=\"time-logo\" src={time} />\r\n                </div>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"input-wrapper col-md-5\">\r\n                            <div className=\"reminder-form\">\r\n                                <div className=\"inline-block\">\r\n                                    <textarea rows=\"3\" className=\"form-control text-input\" placeholder=\"write something here...\"\r\n                                        onChange={event => this.setState({ text: event.target.value })} ></textarea>\r\n                                    <div id=\"error-text\">*This field cannnot be empty</div>\r\n                                </div>\r\n                                <div className=\"inline-block\">\r\n                                    <input className=\"form-control date-input\" type=\"datetime-local\" onChange={event => this.setState({ dueDate: event.target.value })} />\r\n                                    <button type=\"submit\" className=\"btn btn-success\" onClick={() => this.addReminder()}>Add Reminder</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"output-wrapper col-md-7\">\r\n                            <div>\r\n                                <div className=\"row reminder-wrapper\">\r\n                                    <ul className=\"list-group\">\r\n                                        {\r\n                                            this.props.reminders.map((reminder, index) => {\r\n                                                return (\r\n                                                    <ReminderList key={index} reminder={reminder} deleteReminder={this.props.deleteReminder} />\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </ul>\r\n                                </div>\r\n                                <div className=\"row delete-wrapper\">\r\n                                    <button type=\"button\" className=\"btn btn-danger\" onClick={() => { if (window.confirm('Are you sure you wish to delete all items?')) this.props.clearReminders() }}>Clear All</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        reminders: state\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { addReminder, deleteReminder, clearReminders })(App);\r\n","import { ADD_REMINDER, DELETE_REMINDER, CLEAR_REMINDERS } from '../constants'\r\n\r\nexport const addReminder = (text, dueDate) => {\r\n    const action = {\r\n        type: ADD_REMINDER,\r\n        text,\r\n        dueDate\r\n    }\r\n    console.log('action in addReminder', action);\r\n    return action\r\n}\r\n\r\nexport const deleteReminder = (id) => {\r\n    const action ={\r\n        type: DELETE_REMINDER,\r\n        id\r\n    }\r\n    console.log('delete in actions', action)\r\n    return action\r\n}\r\n\r\nexport const clearReminders = () => {\r\n    return{\r\n        type: CLEAR_REMINDERS\r\n    }\r\n}","export const ADD_REMINDER = 'ADD_REMINDER'\r\nexport const DELETE_REMINDER = 'DELETE_REMINDER'\r\nexport const CLEAR_REMINDERS = 'CLEAR_REMINDERS'","import { ADD_REMINDER, DELETE_REMINDER, CLEAR_REMINDERS } from '../constants';\r\nimport { read_cookie, bake_cookie } from 'sfcookies';\r\n\r\nconst reminder = (action) => {\r\n    let { text, dueDate } = action;\r\n    return {\r\n        id: Math.random(),\r\n        text,\r\n        dueDate\r\n    }\r\n}\r\n\r\nconst removeById = (state = [], id) => {\r\n    const reminders = state.filter(reminder => reminder.id !== id)\r\n    console.log('new reduced reminders', reminders)\r\n    return reminders\r\n}\r\n\r\nconst reminders = (state = [], action) => {\r\n    let reminders = null;\r\n    state = read_cookie('reminders')\r\n    switch (action.type) {\r\n        case ADD_REMINDER:\r\n            reminders = [...state, reminder(action)]\r\n            bake_cookie('reminders', reminders)\r\n            return reminders\r\n        case DELETE_REMINDER:\r\n            reminders = removeById(state, action.id)\r\n            bake_cookie('reminders', reminders)\r\n            return reminders\r\n        case CLEAR_REMINDERS:\r\n            reminders = []\r\n            bake_cookie('reminders', reminders)\r\n            return reminders\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nexport default reminders;","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './components/App'\r\nimport { Provider } from 'react-redux'\r\nimport { createStore } from 'redux'\r\nimport reducer from './reducers'\r\n\r\nconst store = createStore(reducer);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}><App /></Provider>, document.getElementById('root')\r\n)"],"sourceRoot":""}